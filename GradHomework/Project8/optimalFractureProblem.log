-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : //WP4
    2 : //Advanced Geomechanics
    3 : //John D'Angelo
    4 : //University of Texas at Austin
    5 : //Derived from program by Professor Espinoza and Igor Shovkun
    6 :
    7 : //Fracture Problem
    8 :
    9 : //Domain is symmetric so I will only simulate half of it
   10 :
   11 : //--------------------------------------------------------------------
   12 : // Dimensions
   13 : real xSize = 200. ;  // x-size of the domain, m
   14 : real ySize = 300. ;  // y-size of the domain, m
   15 : real hf = 45. ;     // fracture half-height, m
   16 : real w0 = 0.010;   // fracture maximum width, m
   17 :
   18 : // Elastic constants
   19 : real E = 7.3e6*6894.76 ;     // Young's modulus, Pa
   20 : real nu = 0.20;     // Poisson's ratio
   21 :
   22 : real G = E/(2*(1+nu )) ; // shear modulus
   23 : real lambda = E*nu/((1+nu)*(1-2*nu)) ; // Lame constant
   24 :
   25 : //Stresses
   26 : real Pfracture = (w0*E/(4*(1 - nu*nu)*hf));
   27 :
   28 : //--------------------------------------------------------------------
   29 : // First define boundaries
   30 : border Right(t=0,ySize){x=xSize;y=t;}
   31 : border Top(t=xSize,0){x=t;y=ySize;}
   32 : border L1(t=ySize,ySize-105.){x=0;y=t;}
   33 : border Fracture(t=ySize-105.,ySize-195.){x=0;y=t;}
   34 : border L3(t=ySize-195.,0){x=0;y=t;}
   35 : border Bottom(t=0,xSize){x=t;y=0;}
   36 :
   37 : //SHOW DOMAIN
   38 : plot( Right(10)+Top(10)+L1(10)+Fracture(40)+L3(10)+Bottom(10), wait=true);
   39 :
   40 :
   41 : //--------------------------------------------------------------------
   42 : // Create mesh
   43 : int n = 20; // number of mesh nodes on the outer borders
   44 : int nfract = 40; // number of mesh nodes on wellbore
   45 : mesh Omega = buildmesh (Right(n)+Top(n)+L1(2*n)+L3(2*n)+Bottom(n)+Fracture(nfract));
   46 :
   47 : plot(Omega, wait=true);
   48 : //
   49 : // FE spaces
   50 : fespace Displacement(Omega, P1); // linear shape functions
   51 : fespace Stress(Omega, P0); // piecewise constants
   52 :
   53 : Displacement u1, u2, v1, v2;
   54 : Stress sigmaxx, sigmazz, sigmaxy;
   55 :
   56 :
   57 : //--------------------------------------------------------------------
   58 : // definition of 2 macros :
   59 : // macro for strain
   66 #         ] )     dy(u2))+dy(u1))/2 ,
   67 :         [
   68 :                 dx(u1),
   69 :                 (dy(u1)+dx(u2))/2 ,
   70 :                 (dx(u2)+dy(u1))/2 ,
   71 :                 dy(u2)
   72 :         ]//eps_xx, eps_xy , eps_yx ,    eps_yy
   73 :
   74 : // macro for stress
   81 #         ]  )    lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3],
   82 :         [
   83 :                 (lambda+2.*G)*e(u1,u2)[0]+lambda*e(u1,u2)[3],
   84 :                 2.*G*e(u1,u2)[1],
   85 :                 2.*G*e(u1,u2)[2],
   86 :                 lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3]
   87 :         ] //stress s_xx, s_xy, s_yx, s_yy
   88 :
   89 :
   90 : //      Define  system  of      equations
   91 : problem Elasticity([u1,u2],[v1,v2]) =
   92 :         int2d(Omega)(sigma(u1,u2)
   76 :
   77 :
   78 :
   79 :
   80 :
   81 :
   76 :         [
   77 :                 (lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3],
   78 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][1],
   79 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][2],
   80 :                 lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+(lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3]
   81 :         ] '*e(v1,v2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(v1),
   63 :                 (dy(v1)+dx(v2))/2 ,
   64 :                 (dx(v2)+dy(v1))/2 ,
   65 :                 dy(v2)
   66 :         ])
   93 :         // Boundary conditions
   94 :         + on(Bottom,u2=0)
   95 :         + on(L1,u1=0)
   96 :         + on(L3,u1=0)
   97 :         + on(Right,u1=0)  // Neumann boundary conditions
   98 :         + on(Top,u2=0)
   99 :         + int1d(Omega,Fracture)(Pfracture*(N.x*v1+N.y*v2))
  100 :         ;
  101 :
  102 :
  103 : //--------------------------------------------------------------------
  104 : //      Solve system
  105 : Elasticity;
  106 :
  107 :
  108 : // Stresses
  109 : sigmaxx = sigma(u1,u2)
   76 :
   77 :
   78 :
   79 :
   80 :
   81 :
   76 :         [
   77 :                 (lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3],
   78 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][1],
   79 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][2],
   80 :                 lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+(lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3]
   81 :         ] [0];
  110 : sigmazz = sigma(u1,u2)
   76 :
   77 :
   78 :
   79 :
   80 :
   81 :
   76 :         [
   77 :                 (lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3],
   78 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][1],
   79 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][2],
   80 :                 lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+(lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3]
   81 :         ] [3];
  111 : sigmaxy = sigma(u1,u2)
   76 :
   77 :
   78 :
   79 :
   80 :
   81 :
   76 :         [
   77 :                 (lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3],
   78 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][1],
   79 :                 2.*G*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][2],
   80 :                 lambda*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][0]+(lambda+2.*G)*e(u1,u2)
   61 :
   62 :
   63 :
   64 :
   65 :
   66 :
   61 :         [
   62 :                 dx(u1),
   63 :                 (dy(u1)+dx(u2))/2 ,
   64 :                 (dx(u2)+dy(u1))/2 ,
   65 :                 dy(u2)
   66 :         ][3]
   81 :         ] [1];  // we could     use     [2]     as      well
  112 :
  113 : //--------------------------------------------------------------------
  114 : // plot on the deformed surface
  115 : mesh Th=movemesh(Omega,[x+20*u1,y+20*u2]);
  116 : // real minT=checkmovemesh(Omega,[x+10*uu,y+10*vv]);//the min triangle area
  117 :
  118 :
  119 : plot(Th,cmm="Deformed configuration",wait=1);
  120 :
  121 :
  122 : // plot the deformation field and stress
  123 : plot([u1,u2],coef=10,cmm="Displacement field",wait=1,value=true);
  124 : plot(sigmaxx,fill=1, cmm="Stress sigmaxx",wait=1,value=true);
  125 : plot(sigmaxy,fill=1, cmm="Stress sigmaxy",wait=1,value=true);
  126 : plot(sigmazz,fill=1, cmm="Stress sigmazz",wait=1,value=true);
  127 :
  128 :
  129 : // write files
  130 : ofstream ffX("output" + w0*1000. + ".dat");
  131 :
  132 : ffX<<"x,z,sig_zz,sig_xx"<<endl;
  133 :
  134 : for(int i=0;i<100;i++) {
  135 :         // x, y, Sxx, Syy, Sxy
  136 :                 real xline = xSize*i/100.;
  137 :                 real zline = ySize/2.;
  138 :         // Analytical solution
  139 :         //write file numerical and analytical solution
  140 :
  141 :         ffX<< xline <<", "<< zline
  142 :                 <<", "<< sigmaxx(xline,zline)
  143 :                 <<", "<< sigmazz(xline,zline)
  144 :                 <<endl;
  145 :         }
  146 :  sizestack + 1024 =6656  ( 5632 )
 
  --  mesh:  Nb of Triangles =   3152, Nb of Vertices 1667
 kk 2 3 :   -- Solve :
          min -1.32079e-005  max 0.0045524
          min -0.00149857  max 0.00149384
times: compile 0.419s, execution 2.292s,  mpirank:0
 ######## We forget of deleting   7201 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3713,  size :413984 mpirank: 0
Ok: Normal End
 try getConsole C:\Users\JohnD\Box Sync\Class Work\Fall2018\PGE383-AdvancedGeomechanics\Projects\Project8\optimalFractureProblem.edp

//WP4
//Advanced Geomechanics
//John D'Angelo
//University of Texas at Austin
//Derived from program by Professor Espinoza and Igor Shovkun

//Fracture Problem

//Domain is symmetric so I will only simulate half of it

//--------------------------------------------------------------------
// Dimensions
real xSize = 200. ;  // x-size of the domain, m
real ySize = 300. ;  // y-size of the domain, m
real hf = 45. ;     // fracture half-height, m
real w0 = 0.010;   // fracture maximum width, m

// Elastic constants
real E = 7.3e6*6894.76 ;     // Young's modulus, Pa
real nu = 0.20;     // Poisson's ratio

real G = E/(2*(1+nu )) ; // shear modulus
real lambda = E*nu/((1+nu)*(1-2*nu)) ; // Lame constant

//Stresses
real Pfracture = (w0*E/(4*(1 - nu*nu)*hf));

//--------------------------------------------------------------------
// First define boundaries
border Right(t=0,ySize){x=xSize;y=t;}
border Top(t=xSize,0){x=t;y=ySize;}
border L1(t=ySize,ySize-105.){x=0;y=t;}
border Fracture(t=ySize-105.,ySize-195.){x=0;y=t;}
border L3(t=ySize-195.,0){x=0;y=t;}
border Bottom(t=0,xSize){x=t;y=0;}

//SHOW DOMAIN
plot( Right(10)+Top(10)+L1(10)+Fracture(40)+L3(10)+Bottom(10), wait=true);


//--------------------------------------------------------------------
// Create mesh
int n = 20; // number of mesh nodes on the outer borders
int nfract = 40; // number of mesh nodes on wellbore
mesh Omega = buildmesh (Right(n)+Top(n)+L1(2*n)+L3(2*n)+Bottom(n)+Fracture(nfract));

plot(Omega, wait=true);
//
// FE spaces
fespace Displacement(Omega, P1); // linear shape functions
fespace Stress(Omega, P0); // piecewise constants

Displacement u1, u2, v1, v2;
Stress sigmaxx, sigmazz, sigmaxy;


//--------------------------------------------------------------------
// definition of 2 macros :
// macro for strain
macro e(u1,u2)
	[
		dx(u1),
		(dy(u1)+dx(u2))/2 ,
		(dx(u2)+dy(u1))/2 ,
		dy(u2)
	]//eps_xx, eps_xy , eps_yx ,	eps_yy

// macro for stress
macro sigma(u1,u2)
	[
		(lambda+2.*G)*e(u1,u2)[0]+lambda*e(u1,u2)[3],
		2.*G*e(u1,u2)[1],
		2.*G*e(u1,u2)[2],
		lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3]
	] //stress s_xx, s_xy, s_yx, s_yy


//	Define	system	of	equations
problem	Elasticity([u1,u2],[v1,v2]) =
	int2d(Omega)(sigma(u1,u2)'*e(v1,v2))
	// Boundary conditions
	+ on(Bottom,u2=0)
	+ on(L1,u1=0)
	+ on(L3,u1=0)
	+ on(Right,u1=0)  // Neumann boundary conditions
	+ on(Top,u2=0)
	+ int1d(Omega,Fracture)(Pfracture*(N.x*v1+N.y*v2))
	;


//--------------------------------------------------------------------
//	Solve system
Elasticity;


// Stresses
sigmaxx = sigma(u1,u2)[0];
sigmazz = sigma(u1,u2)[3];
sigmaxy = sigma(u1,u2)[1];	// we could	use	[2]	as	well

//--------------------------------------------------------------------
// plot on the deformed surface
mesh Th=movemesh(Omega,[x+20*u1,y+20*u2]);
// real minT=checkmovemesh(Omega,[x+10*uu,y+10*vv]);//the min triangle area


plot(Th,cmm="Deformed configuration",wait=1);


// plot the deformation field and stress
plot([u1,u2],coef=10,cmm="Displacement field",wait=1,value=true);
plot(sigmaxx,fill=1, cmm="Stress sigmaxx",wait=1,value=true);
plot(sigmaxy,fill=1, cmm="Stress sigmaxy",wait=1,value=true);
plot(sigmazz,fill=1, cmm="Stress sigmazz",wait=1,value=true);


// write files
ofstream ffX("output" + w0*1000. + ".dat");

ffX<<"x,z,sig_zz,sig_xx"<<endl;

for(int i=0;i<100;i++) {
	// x, y, Sxx, Syy, Sxy
		real xline = xSize*i/100.;
		real zline = ySize/2.;
	// Analytical solution
	//write file numerical and analytical solution

	ffX<< xline <<", "<< zline
		<<", "<< sigmaxx(xline,zline)
		<<", "<< sigmazz(xline,zline)
		<<endl;
	}

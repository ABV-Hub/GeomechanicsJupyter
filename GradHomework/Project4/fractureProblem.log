-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : //WP4
    2 : //Advanced Geomechanics
    3 : //John D'Angelo
    4 : //University of Texas at Austin
    5 : //Derived from program by Professor Espinoza and Igor Shovkun
    6 :
    7 : //Fracture Problem
    8 :
    9 : //Domain is symmetric so I will only simulate half of it
   10 :
   11 : //--------------------------------------------------------------------
   12 : // Dimensions
   13 : real xSize = 50. ;  // x-size of the domain
   14 : real ySize = 100. ;  // y-size of the domain
   15 : real c = 10. ;      // elliptical fracture half-length
   16 : real w0 = 0.05 ;
   17 :
   18 : // Elastic constants
   19 : real E = 3e10 ;     // Young's modulus
   20 : real nu = 0.20 ;     // Poisson's ratio
   21 :
   22 : real G = E/(2*(1+nu )) ; // shear modulus
   23 : real lambda = E*nu/((1+nu)*(1-2*nu)) ; // Lame constant
   24 :
   25 : //Stresses
   26 : real Pfracture = 10e6;
   27 :
   28 : //--------------------------------------------------------------------
   29 : // First define boundaries
   30 : border Right(t=0,ySize){x=xSize;y=t;}
   31 : border Top(t=xSize,0){x=t;y=ySize;}
   32 : border L1(t=ySize,ySize-20){x=0;y=t;}
   33 : border L2(t=ySize-20,ySize-40){x=0;y=t;}
   34 : border L3(t=ySize-40,ySize-60){x=0;y=t;}
   35 : border L4(t=ySize-60,ySize-80){x=0;y=t;}
   36 : border L5(t=ySize-80,0){x=0;y=t;}
   37 : border Bottom(t=0,xSize){x=t;y=0;}
   38 : border Fracture(t=pi/2,-pi/2){x=w0*cos(t);y=c*sin(t)+50;}
   39 :
   40 : //SHOW DOMAIN
   41 : plot( Right(10)+Top(10)+L1(10)+L2(10)+L3(10)+L4(10)+L5(10)+Bottom(10) + Fracture(40), wait=true);
   42 :
   43 :
   44 : //--------------------------------------------------------------------
   45 : // Create mesh
   46 : int n = 20; // number of mesh nodes on the outer borders
   47 : int nfract = 80; // number of mesh nodes on wellbore
   48 : mesh Omega = buildmesh (Right(n)+Top(n)+L1(n)+L2(n+nfract/2)+L3(nfract)+L4(n+nfract/2)+L5(n)+Bottom(n)+Fracture(nfract));
   49 :
   50 : plot(Omega, wait=true);
   51 :
   52 : // FE spaces
   53 : fespace Displacement(Omega, P1); // linear shape functions
   54 : fespace Stress(Omega, P0); // piecewise constants
   55 :
   56 : Displacement u1, u2, v1, v2;
   57 : Stress sigmaxx, sigmayy, sigmaxy;
   58 :
   59 :
   60 : //--------------------------------------------------------------------
   61 : // definition of 2 macros :
   62 : // macro for strain
   69 #         ] )     dy(u2))+dy(u1))/2 ,
   70 :         [
   71 :                 dx(u1),
   72 :                 (dy(u1)+dx(u2))/2 ,
   73 :                 (dx(u2)+dy(u1))/2 ,
   74 :                 dy(u2)
   75 :         ]//eps_xx, eps_xy , eps_yx ,    eps_yy
   76 :
   77 : // macro for stress
   84 #         ]  )    lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3],
   85 :         [
   86 :                 (lambda+2.*G)*e(u1,u2)[0]+lambda*e(u1,u2)[3],
   87 :                 2.*G*e(u1,u2)[1],
   88 :                 2.*G*e(u1,u2)[2],
   89 :                 lambda*e(u1,u2)[0]+(lambda+2.*G)*e(u1,u2)[3]
   90 :         ] //stress s_xx, s_xy, s_yx, s_yy
   91 :
   92 :
   93 :         //      Define  system  of      equations
   94 : problem Elasticity([u1,u2],[v1,v2]) =
   95 :         int2d(Omega)(sigma(u1,u2)
   79 :
   80 :
   81 :
   82 :
   83 :
   84 :
   79 :         [
   80 :                 (lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3],
   81 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][1],
   82 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][2],
   83 :                 lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+(lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3]
   84 :         ] '*e(v1,v2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(v1),
   66 :                 (dy(v1)+dx(v2))/2 ,
   67 :                 (dx(v2)+dy(v1))/2 ,
   68 :                 dy(v2)
   69 :         ])
   96 :         // Boundary conditions
   97 :         + on(Right,u1=0)              // Dirichlet boundary conditions
   98 :         + on(Bottom,u2=0)
   99 :         + on(Top,u2=0)
  100 :         +on(L1,u1=0)
  101 :         +on(L2,u1=0)
  102 :         +on(L4,u1=0)
  103 :         +on(L5,u1=0)
  104 :         + int1d(Omega,Fracture)(Pfracture*(N.x*v1+N.y*v2))
  105 :         ;
  106 :
  107 :
  108 : //--------------------------------------------------------------------
  109 : //      Solve system
  110 : Elasticity;
  111 :
  112 :
  113 : // Stresses
  114 : sigmaxx = sigma(u1,u2)
   79 :
   80 :
   81 :
   82 :
   83 :
   84 :
   79 :         [
   80 :                 (lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3],
   81 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][1],
   82 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][2],
   83 :                 lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+(lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3]
   84 :         ] [0];
  115 : sigmayy = sigma(u1,u2)
   79 :
   80 :
   81 :
   82 :
   83 :
   84 :
   79 :         [
   80 :                 (lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3],
   81 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][1],
   82 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][2],
   83 :                 lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+(lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3]
   84 :         ] [3];
  116 : sigmaxy = sigma(u1,u2)
   79 :
   80 :
   81 :
   82 :
   83 :
   84 :
   79 :         [
   80 :                 (lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3],
   81 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][1],
   82 :                 2.*G*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][2],
   83 :                 lambda*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][0]+(lambda+2.*G)*e(u1,u2)
   64 :
   65 :
   66 :
   67 :
   68 :
   69 :
   64 :         [
   65 :                 dx(u1),
   66 :                 (dy(u1)+dx(u2))/2 ,
   67 :                 (dx(u2)+dy(u1))/2 ,
   68 :                 dy(u2)
   69 :         ][3]
   84 :         ] [1];  // we could     use     [2]     as      well
  117 :
  118 : //--------------------------------------------------------------------
  119 : // plot on the deformed surface
  120 : mesh Th=movemesh(Omega,[x+10*u1,y+10*u2]);
  121 : plot(Th,cmm="Deformed configuration",wait=1);
  122 :
  123 :
  124 : // plot the deformation field and stress
  125 : plot([u1,u2],coef=10,cmm="Displacement field",wait=1,value=true);
  126 : plot(sigmaxx,fill=1, cmm="Stress sigmaxx",wait=1,value=true);
  127 : plot(sigmaxy,fill=1, cmm="Stress sigmaxy",wait=1,value=true);
  128 : plot(sigmayy,fill=1, cmm="Stress sigmayy",wait=1,value=true);
  129 :
  130 :
  131 : //Stress perpendicular to fracture
  132 : ofstream ffB("partb.dat");
  133 : for(int i=0;i<100;i++) {
  134 :         // x, y, Sxx, Syy, Sxy
  135 :                 real xline = w0 + i*xSize/100.;
  136 :                 real yline = 50. + 0*i/100.;
  137 :         // Analytical solution
  138 :         //write file numerical and analytical solution
  139 :         ffB<< xline <<", "<< yline
  140 :                 <<", "<< sigmaxx(xline,yline)
  141 :                 <<endl;
  142 :         }
  143 :
  144 : //x displacement at face of fracture
  145 : ofstream ffC("partc.dat");
  146 : for(int i=-25;i<25;i++) {
  147 :         // x, y, Sxx, Syy, Sxy
  148 :                 real xline = w0*cos(i*(2.*3.1415/100.));
  149 :                 real yline = 50. + c*sin(i*(2.*3.1415/100.));
  150 :         // Analytical solution
  151 :         //write file numerical and analytical solution
  152 :         ffC<< xline <<", "<< yline
  153 :                 <<", "<< u1(xline,yline) <<", "<< u2(xline,yline)
  154 :                 <<endl;
  155 :         }
  156 :
  157 : //Stress perpendicular to fracture
  158 : ofstream ffD("partd.dat");
  159 : for(int i=0;i<100;i++) {
  160 :         // x, y, Sxx, Syy, Sxy
  161 :                 real xline = 0*i/100.;
  162 :                 real yline = (c)+50 + i*(50.-(c))/100.;
  163 :         // Analytical solution
  164 :         //write file numerical and analytical solution
  165 :         ffD<< xline <<", "<< yline
  166 :                 <<", "<< sigmaxx(xline,yline)
  167 :                 <<endl;
  168 :         }
  169 :  sizestack + 1024 =7536  ( 6512 )
 
  --  mesh:  Nb of Triangles =   5806, Nb of Vertices 3054
 kk 2 3 :   -- Solve :
          min -5.62464e-005  max 0.00598319
          min -0.00210899  max 0.00211109
times: compile 0.373s, execution 3.731s,  mpirank:0
 ######## We forget of deleting   13309 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3916,  size :420984 mpirank: 0
Ok: Normal End
 try getConsole C:\Users\JohnD\Desktop\GeomechanicsJupyter\GradHomework\Project4\fractureProblem.edp
